Класс Hashtable в Java был частью оригинального java.util и представляет собой реализацию Dictionary.
Однако, Java 2 переработал Hashtable, чтобы он реализовал интерфейс Map. Таким образом, Hashtable
теперь интегрирован в структуру коллекций.

!!! Он схож с HashMap, но синхронизован. Не позволяет использовать в качестве ключа или параметра NULL !!!

Как и HashMap, Hashtable хранит пары ключей/значений в хэш-таблице. Используя Hashtable, мы указываем
объект, который используется как ключ, и значение, которое мы хотим связать с этим ключом.
Этот ключ затем хэшируется, а полученный хэш-код используется как индекс, в котором значение хранится в таблице.

Конструкторы:
->	Hashtable() - Этот стандартный конструктор хэщ-таблицы, который создаёт экземпляр класса Hashtable.
->	Hashtable(int size) - Этот конструктор принимает целочисленный параметр и создаёт хэш-таблицу, имеющая
начальный размер, заданный размером целочисленного значения.
->	Hashtable(int size, float fillRatio) - Это создаёт хэш-таблицу, в которой есть начальный размер, указанный
в size, и коэффициент заполнения, заданный fillRatio. Этот коэффициент должен принимать значение между 0.0 и 1.0,
и он определяет, насколько полной может быть хэш-таблица прежде чем она будет изменена в размерах.
->	Hashtable(Map < ? extends K, ? extends V > t) - Это построит Hashtable с указанными отображениями.

Помимо стандартных методов, определённых интерфейсом Map, Hashtable определяет следующие методы:
->	void clear() - Сбрасывает и очищает хэш-таблицу.
->	Object clone() - Возвращает дубликат вызываемого объекта.
->	boolean contains(Object value) - Возвращает true, если некое значение равняется значению,
существующему в хэш-таблице. Возвращает false, если значение не было найдено.
->	boolean containsKey(Object key) - Возвращает true, если некий ключ равняется ключу, существующему
в хэш-таблице. Возвращает false, если ключ не был найден.
->	boolean containsValue(Object value) - Возвращает true, если некое значение равняется значению,
существующему в хэш-таблице. Возвращает false если значение не было найдено.
->	Enumeration elements() - Возвращает перечисление значений, содержащихся в хэш-таблице.
->	Object get(Object key) - Возвращает объект, содержащий значение, связанное с ключом. Если ключ не
находится в хэш-таблицы, возвращается нулевой объект.
->	boolean isEmpty() - Возвращает true, если хэш-таблица пустая; возвращает false, если она содержит
хотя бы один ключ.
->	Enumeration keys() - Возвращает перечисление ключей, содержащихся в хэш-таблице.
->	Object put(Object key, Object value) - Вставляет ключ и значение в хэш-таблицу. Возвращает ноль,
если ключ ещё не в хэш-таблице, возвращает предыдущее значение, связанное с ключом, если ключ уже в хэш-таблице.
->	void rehash() - Увеличивает размер хэш-таблицы и переопределяет все её ключи.
->	Object remove(Object key) - Удаляет ключ и его значение. Возвращает значение, связанное с ключом.
Если ключ отсутствует в хэш-таблице, возвращается нулевой объект.
->	int size() - Возвращает количество записей в хэш-таблице.
->	String toString() - Возвращает строковый эквивалент хэш-таблицы.