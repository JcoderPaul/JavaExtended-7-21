Разъяснения к Less_7_Chapter_2_List_Step1_asList.

Метод формирует список на основе массива. Массив при этом используется для внутреннего представления списка.
Таким образом сохраняется связь между списком и исходным массивом.
-------------------------------------------------------------------------------------------
Изменения в массиве отразятся на списке: ->

String[] a = { "foo", "bar", "baz"};
List<String> list = Arrays.asList(a);
System.out.println(list); // на экране [foo, bar, baz]

a[0] = "aaa";
System.out.println(list); // на экране [aaa, bar, baz]

-------------------------------------------------------------------------------------------
Изменения в списке отразятся на массиве: ->

String[] a = { "foo", "bar", "baz"};
List<String> list = Arrays.asList(a);
System.out.println(list); // на экране [foo, bar, baz]

list.set(0, "bbb");
System.out.println(Arrays.toString(a)); // на экране [bbb, bar, baz]

-------------------------------------------------------------------------------------------
Если массив содержит объекты, очевидно, и массив и список будут ссылаться на одни и те же экземпляры:

Object[] a = { new Object(), new Object(), new Object()};
List<Object> list = Arrays.asList(a);
System.out.println(a[0] == list.get(0)); // true

-------------------------------------------------------------------------------------------
Тот факт, что метод принимает в качестве параметра массив в форме аргументов переменной длины,
позволяет использовать его для относительно удобной инициализации списков:

List<Foo> list = Arrays.asList(new Foo(...), new Foo(...), new Foo(...));

Следует помнить, что метод Arrays.asList() возвращает немодифицируемый List, причём эта
немодифицируемость сохраняется при сериализации/восстановлении списка.