Класс Vector реализует динамический массив. Он похож на ArrayList, но с двумя отличиями:

- Vector синхронизирован (предназначен для работы в многопоточном режиме).

- Vector содержит много устаревших методов (деприкайтед, не рекомендованных для применения),
 которые не являются частью структуры коллекций.

Класс Vector оказывается очень полезным, если мы заранее не знаете размер массива или
нам нужен только тот, который может изменять размеры за время жизни программы.

Конструкторы:

-> Vector( ) - Этот конструктор создает стандартный вектор, который имеет начальный размер 10.

-> Vector(int size) - Этот конструктор принимает аргумент, равный требуемому размеру, и создает
вектор, начальная емкость которого определяется size.

-> Vector(int size, int incr) - Этот конструктор создает вектор, чья начальная емкость задается
size и инкремент которого определяется incr. Инкремент определяет количество элементов, которые
будут выделяться каждый раз, когда вектор будет изменен.

-> Vector(Collection c) - Этот конструктор создает вектор, содержащий элементы коллекции c.

Методы и описание:

-> void add(int index, Object element) - Вставляет указанный элемент в указанное положение в этом Vector.

-> boolean add(Object o) - Добавляет указанный элемент в конец этого вектора.

-> boolean addAll(Collection c) - Добавляет все элементы в указанной коллекции в конец этого вектора
в том порядке, в котором они возвращаются указанным итератором коллекции.

-> boolean addAll(int index, Collection c) - Вставляет все элементы внутри указанной Collection в
этот Vector в указанной позиции.

-> void addElement(Object obj) - Добавляет указанный компонент в конец этого вектора, увеличивая
его размер на единицу.

-> int capacity() - Возвращает текущую емкость этого вектора.

-> void clear() - Удаляет все элементы из этого вектора.

-> Object clone() - Возвращает клон этого вектора.

-> boolean contains(Object elem) - Тестирует, является ли указанный объект компонентом в этом векторе.

-> boolean containsAll(Collection c) - Возвращает true, если этот вектор содержит все элементы указанной Collection.

-> void copyInto(Object[] anArray) - Копирует компоненты этого вектора в указанный массив.

-> Object elementAt(int index) - Возвращает компонент по указанному индексу.

-> Enumeration elements() - Возвращает перечисление компонентов этого вектора.

-> void ensureCapacity(int minCapacity) - Увеличивает ёмкость этого вектора, если это необходимо,
для обеспечения того, что он может удерживать, по меньшей мере, количество компонентов, заданных
аргументом минимальной емкости.

-> boolean equals(Object o) - Сравнивает указанный объект с этим вектором.

-> Object firstElement() - Возвращает первый компонент (элемент с индексом 0) этого вектора.

-> Object get(int index) - Возвращает элемент в указанной позиции в этом векторе.

-> int hashCode() - Возвращает значение хэш-кода для этого вектора.

-> int indexOf(Object elem) - Ищет первое появление данного аргумента, проверяя равенство с помощью метода equals.

-> int indexOf(Object elem, int index) - Ищет первое появление данного аргумента, начиная поиск
с index, и тестирование для равенства с использованием метода equals.

-> void insertElementAt(Object obj, int index) - Вставляет указанный объект в качестве компонента
в этот вектор по указанному индексу.

-> boolean isEmpty() - Проверяет этот вектор на отсутствие компонентов.

-> Object lastElement() - Возвращает последний компонент вектора.

-> int lastIndexOf(Object elem) - Возвращает индекс последнего упоминания указанного объекта в этот вектор.

-> int lastIndexOf(Object elem, int index) - Ищет в обратную сторону указанный объекта, начиная
с указанного индекса, и возвращает индекс к нему.

-> Object remove(int index) - Удаляет элемент в указанной позиции в этом векторе.

-> boolean remove(Object o) - Удаляет первое упоминание указанного элемента в этом векторе.
Если вектор не содержит элемент, он не изменяется.

-> boolean removeAll(Collection c) - Удаляет из этого вектора все его элементы, которые содержатся
в указанной Collection.

-> void removeAllElements() - Удаляет все компоненты из этого вектора и устанавливает его размер нулевым.

-> boolean removeElement(Object obj) - Удаляет первое (с наименьшим индексом) упоминание аргумента
из этого вектора.

-> void removeElementAt(int index) - removeElementAt(int index).

-> protected void removeRange(int fromIndex, int toIndex) - Удаляет из этого List все элементы,
индекс которых находится между fromIndex,
включительно, и toIndex, исключительно.

-> boolean retainAll(Collection c) - Сохраняет только элементы в этом векторе, которые содержатся
в указанной Collection.

-> Object set(int index, Object element) - Заменяет элемент в указанной позиции в этом векторе указанным элементом.

-> void setElementAt(Object obj, int index) - Устанавливает компонент в указанном индексе этого
вектора как заданный объект.

-> void setSize(int newSize) - Устанавливает размер этого вектора.

-> int size() - Возвращает количество компонентов в этом векторе.

-> List subList(int fromIndex, int toIndex) - Возвращает представление (вид) части этого List
между fromIndex, включительно, и toIndex, исключительно.

-> Object[] toArray() - Возвращает массив, содержащий все элементы этого вектора в правильном порядке.

-> Object[] toArray(Object[] a) - Возвращает массив, содержащий все элементы этого вектора в правильном порядке;
тип выполнения возвращаемого массива - тип указанного массива.

-> String toString() - Возвращает строковое представление этого вектора, содержащее строковое
представление каждого элемента.

-> void trimToSize() - Обрезает емкость этого вектора до текущего размера вектора.